@inject IJSRuntime js

<Menu @ref="menu">
    <MainMenu>
        <button class="w3-button w3-round w3-margin-bottom w3-animate-opacity w3-white" style="width: 100%" @onclick=@(() => menu?.GotoGameOptions())>Play Now</button><br>
        <button class="w3-button w3-round w3-margin-bottom w3-animate-opacity w3-white" style="width: 100%" @onclick=@(() => menu?.GotoStatistics())>Statistics</button><br>
    </MainMenu>
    <PlayOptions>
        <label>Presets</label>
        <button class="w3-button w3-round w3-margin-bottom w3-animate-opacity w3-white" style="width: 100%" @onclick=@(() => { NewPuzzleEasy(); menu?.GotoGameplay(); })>Easy</button><br>
        <button class="w3-button w3-round w3-margin-bottom w3-animate-opacity w3-white" style="width: 100%" @onclick=@(() => { NewPuzzleMedium(); menu?.GotoGameplay(); })>Medium</button><br>
        <button class="w3-button w3-round w3-margin-bottom w3-animate-opacity w3-white" style="width: 100%" @onclick=@(() => { NewPuzzleHard(); menu?.GotoGameplay(); })>Hard</button><br>
        <button class="w3-button w3-round w3-margin-bottom w3-animate-opacity w3-white" style="width: 100%" @onclick=@(() => { NewPuzzleExtreme(); menu?.GotoGameplay(); })>Extreme</button><br>

        <label>Custom</label>
        <input type="range" min="0" max="100" class="w3-input" @bind=custom_percent @bind:event="oninput">
        <button class="w3-button w3-round w3-margin-bottom w3-animate-opacity w3-white" style="width: 100%" @onclick=@(() => { NewPuzzleCustom(); menu?.GotoGameplay(); })>@(custom_percent)% Exposed </button><br>
    </PlayOptions>
    <Statistics>
        <StatisticsRenderer Stats=@gameStats></StatisticsRenderer>
    </Statistics>
    <Gameplay>
        <div @onkeyup=pressChar tabindex="0" class='play-area'>
            <div class="w3-center">
                <div style="text-align: right;">
                    <button class="w3-button w3-round w3-flat" style="padding: 0px 12px 0px 0px;" @onclick=openHelp>
                        <Bubble Arrow=@Bubble.Direction.right>Need help?</Bubble>
                    </button>
                </div>
                <Timer @ref=gameTimer></Timer> | Mistakes: @(new string('x', mistakes))
            </div>
            <Sidebar @ref=helpSidebar>
                <div class="back w3-container w3-display-container w3-text-white" style="text-align: center">
                    <span class="w3-button w3-flat w3-display-topleft" @onclick=hideHelp>&times;</span>
                    <h2>Help!</h2>
                </div>
                <div class="w3-center">
                @if (this.thinking) {
                    <p class="w3-padding">Give me a minute...</p>
                    <img style="width: 50%" src="favicons/sudoku_mascot.svg">
                } else if (this.steps.Count <= 0 || !ReferenceEquals(this.solveError, null)) {
                    <p class="w3-padding">I can show you how to solve this puzzle. Simply click the "Solve It!" button below and I can determine all the steps you need to get to the solution. Be patient, I am still a work in progress.</p>
                    <img style="width: 50%" src="favicons/sudoku_mascot.svg">
                    <div class="w3-margin-top w3-center">
                        <button class="w3-button w3-round back" style="width: 90%;" @onclick=getSolutionSteps>Solve It!</button>
                    </div>
                    <div class="w3-padding">
                        @this.solveError?.Message
                    </div>
                } else {
                    <div class="w3-container" style="text-align: left;">
                        <img style="width: 3em" src="favicons/sudoku_mascot.svg"> Here's the steps I took.<br>
                    </div>
                    <div class="w3-margin-top w3-center">
                        <button class="w3-button w3-round back" style="width: 90%;" @onclick=@(() => this.steps.Clear())>Restart</button>
                    </div>
                    <div style="text-align: left; padding: 2px; margin-top: 8px;">
                    @{
                    var first = true;
                    }
                    @foreach (var step in this.steps) {
                        <div class="w3-card w3-container w3-margin-bottom">
                            <strong>@step.StepName()</strong><br>
                            <i>Cell(@(step.Cell.CellX), @(step.Cell.CellY)) &larr; @(step.InputValue)</i>
                            @if (first) {
                                <p>@step.StepDescription()</p>
                                var firstStep = step;
                                <div style="text-align: right;">
                                    <button class="w3-button w3-flat font-back" @onclick=@(() => showHelp(firstStep))>Show Me</button>
                                    <button class="w3-button w3-flat font-back" @onclick=@(() => applyHelp(firstStep))>Do It</button>
                                </div>
                                first = false;
                            }
                        </div>
                    }
                    </div>
                }
                </div>
            </Sidebar>
            <PuzzleDrawer @ref=drawer Puzzle=@currentPuzzle OnSelect=select OnDeselect=deselect></PuzzleDrawer>
        </div>
        <div class="w3-center">
        @for(var i = 1; i < 10; i++) {
            var digit = i;
            @if (remainingDigits.ContainsKey(digit) && remainingDigits[digit] > 0) {
                <button class="w3-button w3-round w3-gray" style='margin: 2px;' @onclick=@(() => PlayDigit(digit))>@i</button>
            } else {
                <button class="w3-button w3-round w3-dark-gray" style='margin: 2px;'>@i</button>
            }
        }
        <button class="w3-button w3-round w3-gray" style='margin: 2px;' @onclick=@(() => ClearWrongDigit())>âŒ«</button>
        </div>
    </Gameplay>
</Menu>

<Modal @ref="success">
    <Head>
        <h2 class="w3-center">Congratuations!!</h2>
        <div class="w3-center">
            You have completed this puzzle in @completionTime with @mistakes mistakes.
        </div>
    </Head>
    <Body>
        <StatisticsRenderer Stats=@gameStats></StatisticsRenderer>
    </Body>
    <Footer>
        <div class="w3-center w3-padding">
            <button class="w3-button w3-round w3-gray w3-margin-right" @onclick=@(() => success?.Hide())>Close</button>
            <button class="w3-button w3-round w3-gray w3-margin-left" @onclick=@(() => { success?.Hide(); menu?.GotoRoot(); })>Close & Return Home</button>
        </div>
    </Footer>
</Modal>

@code {
    private Statistics? gameStats;
    private Menu? menu;
    private IPuzzleGenerator generator = new BacktrackingGenerator();
    private Timer? gameTimer;
    private PuzzleDrawer? drawer;
    private Puzzle? currentPuzzle;  
    private int mistakes = 0;

    private Modal? success;
    private TimeSpan completionTime;

    protected override async Task OnAfterRenderAsync(bool first) {
        if (first) {
            await loadStats();
        }
    }

    private static readonly string saveKey = "sudoku.statistics.json";
    private async Task loadStats() {
        var stats = await js.InvokeAsync<string>("window.localStorage.getItem", saveKey);
        if (!string.IsNullOrEmpty(stats)) {
            try {
                var parsed = System.Text.Json.JsonSerializer.Deserialize<Statistics>(stats);
                this.gameStats = parsed ?? new Statistics();
            } catch {
                this.gameStats = new Statistics();
            }
        }
    }

    private void saveStats() {
        if (gameStats != null) {
            js.InvokeVoidAsync("window.localStorage.setItem", saveKey, System.Text.Json.JsonSerializer.Serialize(this.gameStats));
        }
    }

    public void NewPuzzleEasy() {
        custom_percent = 75f;
        NewPuzzleCustom();
    }

    public void NewPuzzleMedium() {
        custom_percent = 50f;
        NewPuzzleCustom();
    }

    public void NewPuzzleHard() {
        custom_percent = 25f;
        NewPuzzleCustom();
    }

    public void NewPuzzleExtreme() {
        custom_percent = 10f;
        NewPuzzleCustom();
    }

    private float custom_percent = 50f;
    public void NewPuzzleCustom() {
        this.mistakes = 0;
        this.steps.Clear();
        this.currentPuzzle = MakePuzzlePercentExposed(custom_percent / 100f);
        checkRemainingDigits();
        gameTimer?.StartTimer();
        StateHasChanged();
    }

    private Random rng = new Random();

    public Puzzle MakePuzzlePercentExposed(float percent) {
        percent = MathF.Max(0, MathF.Min(percent, 1)); // 0 to 1;
        const int cellCount = 9*9;
        int cells = (int)(percent * cellCount);        // 0 to 9*9

        var puzzle = generator.Generate();
        var allCells = puzzle.ToList();
        allCells.Shuffle();

        foreach (var cell in allCells.Take(cells)) {
            cell.EnteredValue = cell.ActualValue;
        }

        return puzzle;
    }

    private void pressChar(KeyboardEventArgs e) {
        if (e.Key.Length == 1 && char.IsDigit(e.Key[0])) {
            PlayDigit(int.Parse(e.Key));
        }
    }

    private void select(Cell cell) {
        this.drawer?.ClearHighlighting();

        if (ReferenceEquals(this.currentPuzzle, null))
            return;

        if (cell.EnteredValue.HasValue && cell.EnteredValue.Value == cell.ActualValue) {
            highlightWithNumber(cell.ActualValue);
        }
    }

    private void highlightWithNumber(int num) {
        if (ReferenceEquals(this.currentPuzzle, null))
            return;

        foreach (var c in this.currentPuzzle) {
            if (c.EnteredValue.HasValue && c.EnteredValue.Value == c.ActualValue && c.ActualValue == num) {
                this.drawer?.Highlight(c);
            }
        }
    }

    private void deselect() {
        this.drawer?.ClearHighlighting();
    }

    private void onCorrectDigitEntered() {
        checkRemainingDigits();
        if (currentPuzzle?.IsSolved() ?? false) {
            // Congrats!!
            gameTimer?.StopTimer();
            if (gameTimer != null) {
                completionTime = gameTimer.Ellapsed();
            }
            if (gameStats == null) {
                gameStats = new Statistics();
            }
            gameStats.CompleteGame(custom_percent, completionTime);
            saveStats();
            success?.Show();
        } else {
            // Continue
        }
    }

    public void PlayDigit(int digit) {
        var cell = drawer?.TryGetSelected();
        highlightWithNumber(digit);
        if (cell != null && (!cell.EnteredValue.HasValue || cell.IsEnteredValueWrong)) {
            cell.EnteredValue = digit;
            if (cell.IsEnteredValueWrong) {
                mistakes++;
            } else {
                onCorrectDigitEntered();
            }
            StateHasChanged();
        }
    }

    private Dictionary<int, int> remainingDigits = new Dictionary<int, int>();
    private void addOrIncrement(Dictionary<int, int> dict, int key) {
        if (dict.ContainsKey(key)) {
            dict[key] += 1;
        } else {
            dict[key] = 1;
        }
    }
    private void checkRemainingDigits() {
        remainingDigits.Clear();
        if (ReferenceEquals(this.currentPuzzle, null))
            return;

        foreach (var cell in this.currentPuzzle) {
            if (!cell.EnteredValue.HasValue || cell.EnteredValue.Value != cell.ActualValue) {
                addOrIncrement(remainingDigits, cell.ActualValue);
            }
        }
    }

    public void ClearWrongDigit() {
        var cell = drawer?.TryGetSelected();
        if (cell != null && (cell.EnteredValue.HasValue && cell.IsEnteredValueWrong)) {
            cell.EnteredValue = null;
        }
    }

    private Sidebar? helpSidebar;
    private void openHelp() {
        helpSidebar?.Show();
    }
    private void hideHelp() {
        helpSidebar?.Hide();
    }

    private bool thinking = false;
    private IPuzzleSolver solver = new InsightfulAStarSolver();
    private List<SolutionStep> steps = new List<SolutionStep>();
    private Exception? solveError = null;
    private void getSolutionSteps() {
        if (ReferenceEquals(this.currentPuzzle, null))
            return;

        if (thinking == false) {
            thinking = true;
            solveError = null;
            steps.Clear();
            var puz = this.currentPuzzle.DeepCopy();
            Task.Run(async () => {
                // Remove all "wrong entries"
                foreach (var cell in puz) {
                    if (cell.IsEnteredValueWrong) {
                        cell.EnteredValue = null;
                    }
                }
                // Send to solver
                try {
                    steps.AddRange(solver.Solve(puz));
                } catch (Exception e) {
                    solveError = e;
                }
                finally {
                    thinking = false;
                    await InvokeAsync(StateHasChanged);
                }
            });
            StateHasChanged();
        }
    }

    private Cell? convertCellToCurrentPuzzle(Cell cell) {
        if (ReferenceEquals(this.currentPuzzle, null))
            return null;

        var x = cell.CellX;
        var y = cell.CellY;

        return this.currentPuzzle.GetCell(x, y);
    }

    private IEnumerable<Cell> convertCellsToCurrentPuzzle(IEnumerable<Cell> cells) {
        if (ReferenceEquals(this.currentPuzzle, null))
            yield break;

        foreach (var cell in cells) {
            var convert = convertCellToCurrentPuzzle(cell);
            if (!ReferenceEquals(convert, null))
                yield return convert;
        }
    }

    private void showHelp(SolutionStep step) {
        this.drawer?.ClearHighlighting();
        this.drawer?.Select(convertCellToCurrentPuzzle(step.Cell));
        this.drawer?.Highlight(convertCellsToCurrentPuzzle(step.HintCells));
    }

    private void applyHelp(SolutionStep step) {
        var cell = convertCellToCurrentPuzzle(step.Cell);
        if (!ReferenceEquals(cell, null)) {
            cell.EnteredValue = step.InputValue;
            this.drawer?.Select(cell);
            select(cell);
        }
        this.steps.Remove(step);
        onCorrectDigitEntered();
    }
}